$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module common_pkg $end
   $var wire 32 @ NR_PRIO_BITS [31:0] $end
   $var wire 32 A NR_INDEX_BITS [31:0] $end
  $upscope $end
  $scope module tb_can_clic $end
   $var wire 3 # entries[0] [2:0] $end
   $var wire 3 $ entries[1] [2:0] $end
   $var wire 3 % entries[2] [2:0] $end
   $var wire 3 & entries[3] [2:0] $end
   $var wire 1 ' enable[0] $end
   $var wire 1 ( enable[1] $end
   $var wire 1 ) enable[2] $end
   $var wire 1 * enable[3] $end
   $var wire 1 + pend[0] $end
   $var wire 1 , pend[1] $end
   $var wire 1 - pend[2] $end
   $var wire 1 . pend[3] $end
   $var wire 1 / is_interrupt $end
   $var wire 2 0 index [1:0] $end
   $scope module dut $end
    $var wire 3 # entries[0] [2:0] $end
    $var wire 3 $ entries[1] [2:0] $end
    $var wire 3 % entries[2] [2:0] $end
    $var wire 3 & entries[3] [2:0] $end
    $var wire 1 ' enable[0] $end
    $var wire 1 ( enable[1] $end
    $var wire 1 ) enable[2] $end
    $var wire 1 * enable[3] $end
    $var wire 1 + pend[0] $end
    $var wire 1 , pend[1] $end
    $var wire 1 - pend[2] $end
    $var wire 1 . pend[3] $end
    $var wire 1 / is_interrupt $end
    $var wire 2 0 index [1:0] $end
    $var wire 3 1 e [2:0] $end
    $var wire 1 2 contenders[0] $end
    $var wire 1 3 contenders[1] $end
    $var wire 1 4 contenders[2] $end
    $var wire 1 5 contenders[3] $end
    $var wire 1 6 or_value $end
    $scope module unnamedblk1 $end
     $var wire 32 7 i [31:0] $end
    $upscope $end
    $scope module unnamedblk2 $end
     $var wire 32 8 i [31:0] $end
    $upscope $end
    $scope module unnamedblk3 $end
     $var wire 32 9 pb [31:0] $end
     $scope module unnamedblk4 $end
      $var wire 32 : i [31:0] $end
     $upscope $end
     $scope module unnamedblk5 $end
      $var wire 32 ; i [31:0] $end
     $upscope $end
    $upscope $end
    $scope module unnamedblk6 $end
     $var wire 32 < pb [31:0] $end
     $scope module unnamedblk7 $end
      $var wire 32 = i [31:0] $end
     $upscope $end
     $scope module unnamedblk8 $end
      $var wire 32 > i [31:0] $end
     $upscope $end
    $upscope $end
    $scope module unnamedblk9 $end
     $var wire 32 ? i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b000 #
b000 $
b000 %
b000 &
1'
1(
1)
1*
1+
1,
1-
1.
0/
b11 0
b000 1
02
03
04
15
16
b00000000000000000000000000000100 7
b00000000000000000000000000000100 8
b11111111111111111111111111111111 9
b00000000000000000000000000000100 :
b00000000000000000000000000000100 ;
b11111111111111111111111111111111 <
b00000000000000000000000000000100 =
b00000000000000000000000000000100 >
b00000000000000000000000000000100 ?
b00000000000000000000000000000011 @
b00000000000000000000000000000010 A
#10000
b010 #
b001 %
b010 &
b010 1
#20000
b011 $
b101 %
1/
b10 0
14
05
06
#30000
b100 $
b001 %
b01 0
13
04
16
#40000
b011 #
b010 $
b00 0
12
03
06
#50000
b010 #
b100 $
b101 %
0)
b01 0
02
13
16
#60000
b011 #
b110 $
b001 %
1)
0,
b00 0
12
03
06
#70000
